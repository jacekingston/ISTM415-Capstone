// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectPrototype.Models;

namespace ProjectPrototype.Migrations
{
    [DbContext(typeof(RosterContext))]
    partial class RosterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProjectPrototype.Models.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameId");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("ProjectPrototype.Models.Manager", b =>
                {
                    b.Property<int>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Phone")
                        .HasColumnType("bigint");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("ManagerId");

                    b.HasIndex("TeamId");

                    b.ToTable("Manager");

                    b.HasData(
                        new
                        {
                            ManagerId = 1,
                            Email = "mstevens@verizon.net",
                            FirstName = "Mike",
                            LastName = "Stevens",
                            Phone = 9723389204L,
                            TeamId = 1
                        },
                        new
                        {
                            ManagerId = 2,
                            Email = "freemansports@gmail.com",
                            FirstName = "John",
                            LastName = "Freeman",
                            Phone = 9725478392L,
                            TeamId = 2
                        },
                        new
                        {
                            ManagerId = 3,
                            Email = "DubWalker@gmail.com",
                            FirstName = "Ryan",
                            LastName = "Walker",
                            Phone = 9725478392L,
                            TeamId = 3
                        },
                        new
                        {
                            ManagerId = 4,
                            Email = "goated@gmail.com",
                            FirstName = "Joe",
                            LastName = "Burrow",
                            Phone = 9725478392L,
                            TeamId = 4
                        },
                        new
                        {
                            ManagerId = 5,
                            Email = "Deflate@gmail.com",
                            FirstName = "Tom",
                            LastName = "Brady",
                            Phone = 9725478392L,
                            TeamId = 5
                        },
                        new
                        {
                            ManagerId = 6,
                            Email = "OldBrett@gmail.com",
                            FirstName = "Brett",
                            LastName = "Favre",
                            Phone = 9725478392L,
                            TeamId = 6
                        },
                        new
                        {
                            ManagerId = 7,
                            Email = "TreyK@gmail.com",
                            FirstName = "Trey",
                            LastName = "Kingston",
                            Phone = 9725478392L,
                            TeamId = 7
                        },
                        new
                        {
                            ManagerId = 8,
                            Email = "KadeK@gmail.com",
                            FirstName = "Kade",
                            LastName = "Kingston",
                            Phone = 9725478392L,
                            TeamId = 8
                        });
                });

            modelBuilder.Entity("ProjectPrototype.Models.Match", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("Outcome")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("MatchId");

                    b.HasIndex("GameId");

                    b.HasIndex("TeamId");

                    b.ToTable("Match");
                });

            modelBuilder.Entity("ProjectPrototype.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumAtBats")
                        .HasColumnType("int");

                    b.Property<int>("NumEarnedRunsAllowed")
                        .HasColumnType("int");

                    b.Property<int>("NumErrors")
                        .HasColumnType("int");

                    b.Property<int>("NumHits")
                        .HasColumnType("int");

                    b.Property<int>("NumHittingStrikeouts")
                        .HasColumnType("int");

                    b.Property<int>("NumHomeruns")
                        .HasColumnType("int");

                    b.Property<int>("NumHomerunsAllowed")
                        .HasColumnType("int");

                    b.Property<int>("NumInningsPitched")
                        .HasColumnType("int");

                    b.Property<int>("NumPitchingStrikeouts")
                        .HasColumnType("int");

                    b.Property<int>("NumPlays")
                        .HasColumnType("int");

                    b.Property<int>("NumRBI")
                        .HasColumnType("int");

                    b.Property<int>("NumWalks")
                        .HasColumnType("int");

                    b.Property<int>("NumWalksAllowed")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("ProjectPrototype.Models.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<string>("Mascot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("TeamId");

                    b.ToTable("Team");

                    b.HasData(
                        new
                        {
                            TeamId = 1,
                            Losses = 0,
                            Mascot = "Horse",
                            TeamName = "Roughriders",
                            Wins = 0
                        },
                        new
                        {
                            TeamId = 2,
                            Losses = 0,
                            Mascot = "Hammerhead",
                            TeamName = "Sharks",
                            Wins = 0
                        },
                        new
                        {
                            TeamId = 3,
                            Losses = 0,
                            Mascot = "Brett the Bear",
                            TeamName = "Bad News Bears",
                            Wins = 0
                        },
                        new
                        {
                            TeamId = 4,
                            Losses = 0,
                            Mascot = "Keeth",
                            TeamName = "The Hitmen",
                            Wins = 0
                        },
                        new
                        {
                            TeamId = 5,
                            Losses = 0,
                            Mascot = "Beevo",
                            TeamName = "Bisons",
                            Wins = 0
                        },
                        new
                        {
                            TeamId = 6,
                            Losses = 0,
                            Mascot = "Batkid",
                            TeamName = "Bat Attitudes",
                            Wins = 0
                        },
                        new
                        {
                            TeamId = 7,
                            Losses = 0,
                            Mascot = "McLovin",
                            TeamName = "Sliders",
                            Wins = 0
                        },
                        new
                        {
                            TeamId = 8,
                            Losses = 0,
                            Mascot = "Mr. Electro",
                            TeamName = "Lightning",
                            Wins = 0
                        });
                });

            modelBuilder.Entity("ProjectPrototype.Models.Manager", b =>
                {
                    b.HasOne("ProjectPrototype.Models.Team", "Team")
                        .WithMany("Managers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectPrototype.Models.Match", b =>
                {
                    b.HasOne("ProjectPrototype.Models.Game", "Game")
                        .WithMany("Matches")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectPrototype.Models.Team", "Team")
                        .WithMany("Matches")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectPrototype.Models.Player", b =>
                {
                    b.HasOne("ProjectPrototype.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
